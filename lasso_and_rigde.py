# -*- coding: utf-8 -*-
"""lasso and rigde.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wFp4tda--EZMbJyP1TcVlompXwsZuk8g
"""

#general reference:https://www.geeksforgeeks.org/lasso-vs-ridge-vs-elastic-net-ml/

#What is Regularization:
The concept is used to add on some useful information to model to avoid/prevent overfitting
Regularization method
Lasso: coeff less than zero
Ridge: coeff near to zero

from sklearn.datasets import load_boston
data=load_boston()
x=data.data
y=data.target

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=42)

from sklearn.linear_model import Lasso
#Lasso(L1)
model=Lasso(alpha=2)

coeff_lasso=model.fit(x,y).coef_

print(coeff_lasso)

#lets plot the coeff
import matplotlib.pyplot as plt
plt.plot(data.feature_names,coeff_lasso)
plt.xlabel("Feature Name")
plt.ylabel("Coeff_value")
plt.show()

#RIDGE REGRESSION(L2)
# import ridge regression from sklearn library 
import numpy as np
from sklearn.linear_model import Ridge 

# Train the model 
ridgeR = Ridge(alpha =2) 
ridgeR.fit(x_train, y_train) 
y_pred = ridgeR.predict(x_test)

# calculate mean square error 
mean_squared_error_ridge = np.mean((y_pred - y_test)**2) 
print(mean_squared_error_ridge)

# get ridge coefficient and print them 
import pandas as pd
ridge_coefficient = pd.DataFrame() 
ridge_coefficient["Columns"]= data.feature_names 
ridge_coefficient['Coefficient Estimate'] = pd.Series(ridgeR.coef_) 
print(ridge_coefficient)

#lets plot the coeff
import matplotlib.pyplot as plt
plt.plot(ridge_coefficient["Columns"],ridge_coefficient["Coefficient Estimate"])
plt.xlabel("Feature Name")
plt.ylabel("Coeff_value")
plt.show()

#lets plot the coeff
import matplotlib.pyplot as plt
plt.bar(ridge_coefficient["Columns"],ridge_coefficient["Coefficient Estimate"])
plt.xlabel("Feature Name")
plt.ylabel("Coeff_value")
plt.show()